#!/usr/bin/python


import glob
import os
import re
import signal
import time
from sys import exit

try:
    import pygame
except ImportError:
    exit("This script requires the pygame module\nInstall with: sudo pip install pygame")

import pianohat
import drumhat

BANK_PIANO = os.path.join(os.path.dirname(__file__), "sounds/piano")
BANK_DRUMS = os.path.join(os.path.dirname(__file__), "sounds/drums2")

global_volume = 0.01

print("Press CTRL+C to exit.")

NOTE_OFFSET = 3
samples_piano = []
files_piano = []
octave_piano = 0
octaves_piano = 0

pygame.mixer.pre_init(44100, -16, 1, 512)
pygame.mixer.init()
pygame.mixer.set_num_channels(32)

def natural_sort_key(s, _nsre=re.compile('([0-9]+)')):
    return [int(text) if text.isdigit() else text.lower() for text in re.split(_nsre, s)]

files_piano = glob.glob(os.path.join(BANK_PIANO, "*.wav"))
files_piano.sort(key=natural_sort_key)
octaves_piano = len(files_piano) / 12
samples_piano = [pygame.mixer.Sound(sample) for sample in files_piano]
octave_piano = int(octaves_piano / 2)

files_drums = glob.glob(os.path.join(BANK_DRUMS, "*.wav"))
files_drums.sort(key=natural_sort_key)
samples_drums = [pygame.mixer.Sound(f) for f in files_drums]

def set_all_volume():
    print("set volume to "+str(global_volume))
    for sound in samples_piano:
        sound.set_volume( global_volume )
    for sound in samples_drums:
        sound.set_volume( global_volume )

def handle_note(channel, pressed):
    channel = channel + (12 * octave_piano)
    if len(samples_piano) > 13:
        channel += NOTE_OFFSET
    if channel < len(samples_piano) and pressed:
        print('Playing Sound: {}'.format(files_piano[channel]))
        samples_piano[channel].play(loops=0)


def handle_instrument(channel, pressed):
    global patch_index_piano
    print("instrument button pressed", channel, pressed)
    if pressed:
        patch_index_piano += 1


def handle_octave_up(channel, pressed):
    global octave_piano
    if pressed and octave_piano < octaves_piano:
        octave_piano += 1
        print('Selected Octave: {}'.format(octave_piano))


def handle_octave_down(channel, pressed):
    global octave_piano
    if pressed and octave_piano > 0:
        octave_piano -= 1
        print('Selected Octave: {}'.format(octave_piano))



# drums
def handle_drums_hit(event):
    # event.channel is a zero based channel index for each pad
    # event.pad is the pad number from 1 to 8
    samples_drums[event.channel].play(loops=0)
    print("You hit pad {}, playing: {}".format(event.pad,files_drums[event.channel]))

def handle_drums_release():
    pass


pianohat.auto_leds(False)

# ready-animation
for i in range(0, 13):
    pianohat.set_led(i, True)
    time.sleep(0.05)
time.sleep(0.2)
for i in range(0, 16):
    pianohat.set_led(i, False)

pianohat.auto_leds(True)

set_all_volume()

drumhat.on_hit(drumhat.PADS, handle_drums_hit)
drumhat.on_release(drumhat.PADS, handle_drums_release)

pianohat.on_note(handle_note)
pianohat.on_octave_up(handle_octave_up)
pianohat.on_octave_down(handle_octave_down)
pianohat.on_instrument(handle_instrument)


signal.pause()

